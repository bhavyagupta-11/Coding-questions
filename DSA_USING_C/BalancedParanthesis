#include <stdio.h>
#include <string.h>

typedef struct stack{
    int size;
    int top;
    char arr[100];
}stack;

void push(stack *stk, char x){
    if(stk->top == stk->size - 1){
        printf("Stack Overflow\n");
    }
    else{
        stk->top++;
        stk->arr[stk->top] = x;
    }
}

char pop(stack *stk){
    if(stk->top == -1){
        printf("Stack Undeflow\n");
    }
    else{
        stk->top--;
        return stk->arr[stk->top+1];
    }
}

char top(stack *stk){
    return stk->arr[stk->top];
}
    
int matchChar(char a, char b){
    if(a == '(' && b == ')'){
        return 1;
    }
    else if(a == '{' && b == '}'){
        return 1;
    }
    else if(a == '[' && b == ']'){
        return 1;
    }
    return 0;
}

int isValidExp(stack *stk, char* exp){
    for(int i = 0; i<strlen(exp); i++){
        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){
            push(stk, exp[i]);
        }
        if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){
            if(stk->top == -1){
                printf("Missing open paranthesis!\n");
                return 0;
            }
            else if(matchChar(stk->arr[stk->top], exp[i])){
                pop(stk);
            }
            else{
                printf("Unbalanced Paranthesis!\n");
                return 0;
            }
        }
    }
    if(stk->top == -1){
        printf("Balanced Paranthesis!\n");
        return 1;
    }
    else{
        printf("Missing Closed Paranthesis!\n");
        return 0;
    }
}

int main() {
    struct stack stk;
    stk.top = -1;
    char* exp;
    scanf("%s", exp);
    int len = strlen(exp);
    stk.size = len;
    isValidExp(&stk, exp);
    return 0;
}
